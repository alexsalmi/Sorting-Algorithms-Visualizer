{"ast":null,"code":"import colors from './colors.js';\nimport algorithms from './algorithms.js';\nconst utils = {\n  randomize: (size, unique) => {\n    let data = [];\n\n    if (unique) {\n      for (let i = 1; i <= size; i++) {\n        data.push({\n          x: i,\n          y: i,\n          color: colors.default\n        });\n      }\n\n      ;\n    } else {\n      for (let i = 1; i <= size; i++) {\n        data.push({\n          x: i,\n          y: Math.floor(Math.random() * size + 1),\n          color: colors.default\n        });\n      }\n\n      ;\n    }\n\n    for (let i = data.length - 1; i >= 0; i--) {\n      let rand = Math.floor(Math.random() * (i + 1));\n      let temp = data[rand].y;\n      data[rand].y = data[i].y;\n      data[i].y = temp;\n    }\n\n    return data;\n  },\n  swap: (values, i, j) => {\n    let temp = values[i];\n    values[i] = values[j];\n    values[j] = temp;\n    return values;\n  },\n  getSolutionSteps: (data, algo) => {\n    let values = data.map(item => item.y);\n\n    switch (algo) {\n      case 'insertion':\n        var sortedValues = algorithms.insertion(values);\n    }\n\n    let newData = data.map((item, i) => {\n      return {\n        x: item.x,\n        y: sortedValues[i],\n        color: item.color\n      };\n    });\n    return newData;\n  },\n  performStep: (data, step) => {\n    for (let i = 0; i < data.length; i++) {\n      if (step.selected.includes(i)) {\n        data[i].color = colors.selected;\n      } else {\n        data[i].color = colors.default;\n      }\n    }\n\n    for (let i = 0; i < steps.changedValues.length; i++) {\n      let ind = steps.changedValues[i].i;\n      data[ind].y = steps.changedValues[i].value;\n    }\n\n    return data;\n  }\n};\nexport default utils;","map":{"version":3,"sources":["/home/asalmi/Documents/sort2.0/src/utils.js"],"names":["colors","algorithms","utils","randomize","size","unique","data","i","push","x","y","color","default","Math","floor","random","length","rand","temp","swap","values","j","getSolutionSteps","algo","map","item","sortedValues","insertion","newData","performStep","step","selected","includes","steps","changedValues","ind","value"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,SAAS,EAAE,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACzB,QAAIC,IAAI,GAAG,EAAX;;AACA,QAAGD,MAAH,EAAU;AACN,WAAI,IAAIE,CAAC,GAAC,CAAV,EAAaA,CAAC,IAAEH,IAAhB,EAAsBG,CAAC,EAAvB,EAA0B;AACtBD,QAAAA,IAAI,CAACE,IAAL,CAAU;AAACC,UAAAA,CAAC,EAAEF,CAAJ;AAAOG,UAAAA,CAAC,EAAEH,CAAV;AAAaI,UAAAA,KAAK,EAAEX,MAAM,CAACY;AAA3B,SAAV;AACH;;AAAA;AACJ,KAJD,MAKI;AACA,WAAI,IAAIL,CAAC,GAAC,CAAV,EAAaA,CAAC,IAAEH,IAAhB,EAAsBG,CAAC,EAAvB,EAA0B;AACtBD,QAAAA,IAAI,CAACE,IAAL,CAAU;AAACC,UAAAA,CAAC,EAAEF,CAAJ;AAAOG,UAAAA,CAAC,EAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBX,IAAhB,GAAuB,CAAlC,CAAX;AAAiDO,UAAAA,KAAK,EAAEX,MAAM,CAACY;AAA/D,SAAV;AACH;;AAAA;AACJ;;AAED,SAAI,IAAIL,CAAC,GAACD,IAAI,CAACU,MAAL,GAAY,CAAtB,EAAyBT,CAAC,IAAE,CAA5B,EAA+BA,CAAC,EAAhC,EAAmC;AAC/B,UAAIU,IAAI,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBR,CAAC,GAAG,CAArB,CAAX,CAAX;AACA,UAAIW,IAAI,GAAGZ,IAAI,CAACW,IAAD,CAAJ,CAAWP,CAAtB;AACAJ,MAAAA,IAAI,CAACW,IAAD,CAAJ,CAAWP,CAAX,GAAeJ,IAAI,CAACC,CAAD,CAAJ,CAAQG,CAAvB;AACAJ,MAAAA,IAAI,CAACC,CAAD,CAAJ,CAAQG,CAAR,GAAYQ,IAAZ;AACH;;AAED,WAAOZ,IAAP;AACH,GAtBS;AAwBVa,EAAAA,IAAI,EAAE,CAACC,MAAD,EAASb,CAAT,EAAYc,CAAZ,KAAkB;AACpB,QAAIH,IAAI,GAAGE,MAAM,CAACb,CAAD,CAAjB;AACAa,IAAAA,MAAM,CAACb,CAAD,CAAN,GAAYa,MAAM,CAACC,CAAD,CAAlB;AACAD,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAYH,IAAZ;AAEA,WAAOE,MAAP;AACH,GA9BS;AAgCVE,EAAAA,gBAAgB,EAAE,CAAChB,IAAD,EAAOiB,IAAP,KAAgB;AAC9B,QAAIH,MAAM,GAAGd,IAAI,CAACkB,GAAL,CAASC,IAAI,IAAIA,IAAI,CAACf,CAAtB,CAAb;;AAEA,YAAQa,IAAR;AACE,WAAK,WAAL;AACE,YAAIG,YAAY,GAAGzB,UAAU,CAAC0B,SAAX,CAAqBP,MAArB,CAAnB;AAFJ;;AAKA,QAAIQ,OAAO,GAAGtB,IAAI,CAACkB,GAAL,CAAS,CAACC,IAAD,EAAOlB,CAAP,KAAa;AAAC,aAAO;AAACE,QAAAA,CAAC,EAAEgB,IAAI,CAAChB,CAAT;AAAYC,QAAAA,CAAC,EAAEgB,YAAY,CAACnB,CAAD,CAA3B;AAAgCI,QAAAA,KAAK,EAAEc,IAAI,CAACd;AAA5C,OAAP;AAA0D,KAAjF,CAAd;AACA,WAAOiB,OAAP;AACH,GA1CS;AA4CVC,EAAAA,WAAW,EAAE,CAACvB,IAAD,EAAOwB,IAAP,KAAgB;AACzB,SAAI,IAAIvB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACD,IAAI,CAACU,MAApB,EAA4BT,CAAC,EAA7B,EAAgC;AAC5B,UAAGuB,IAAI,CAACC,QAAL,CAAcC,QAAd,CAAuBzB,CAAvB,CAAH,EAA6B;AACzBD,QAAAA,IAAI,CAACC,CAAD,CAAJ,CAAQI,KAAR,GAAgBX,MAAM,CAAC+B,QAAvB;AACH,OAFD,MAGI;AACAzB,QAAAA,IAAI,CAACC,CAAD,CAAJ,CAAQI,KAAR,GAAgBX,MAAM,CAACY,OAAvB;AACH;AACJ;;AAED,SAAI,IAAIL,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC0B,KAAK,CAACC,aAAN,CAAoBlB,MAAnC,EAA2CT,CAAC,EAA5C,EAA+C;AAC3C,UAAI4B,GAAG,GAAGF,KAAK,CAACC,aAAN,CAAoB3B,CAApB,EAAuBA,CAAjC;AACAD,MAAAA,IAAI,CAAC6B,GAAD,CAAJ,CAAUzB,CAAV,GAAcuB,KAAK,CAACC,aAAN,CAAoB3B,CAApB,EAAuB6B,KAArC;AACH;;AAED,WAAO9B,IAAP;AACH;AA5DS,CAAd;AA+DA,eAAeJ,KAAf","sourcesContent":["import colors from './colors.js';\nimport algorithms from './algorithms.js'\n\nconst utils = {\n    randomize: (size, unique) => {\n        let data = [];\n        if(unique){\n            for(let i=1; i<=size; i++){\n                data.push({x: i, y: i, color: colors.default})\n            };\n        }\n        else{\n            for(let i=1; i<=size; i++){\n                data.push({x: i, y:  Math.floor(Math.random() * size + 1), color: colors.default})\n            };\n        }\n        \n        for(let i=data.length-1; i>=0; i--){\n            let rand = Math.floor(Math.random() * (i + 1));\n            let temp = data[rand].y;\n            data[rand].y = data[i].y;\n            data[i].y = temp;\n        }\n\n        return data;\n    },\n\n    swap: (values, i, j) => {\n        let temp = values[i];\n        values[i] = values[j];\n        values[j] = temp;\n\n        return values;\n    },\n\n    getSolutionSteps: (data, algo) => {\n        let values = data.map(item => item.y);\n    \n        switch (algo) {\n          case 'insertion':\n            var sortedValues = algorithms.insertion(values);\n        }\n    \n        let newData = data.map((item, i) => {return {x: item.x, y: sortedValues[i], color: item.color}});\n        return newData;\n    },\n\n    performStep: (data, step) => {\n        for(let i=0; i<data.length; i++){\n            if(step.selected.includes(i)){\n                data[i].color = colors.selected;\n            }\n            else{\n                data[i].color = colors.default;\n            }\n        }\n\n        for(let i=0; i<steps.changedValues.length; i++){\n            let ind = steps.changedValues[i].i\n            data[ind].y = steps.changedValues[i].value;\n        }\n\n        return data;\n    }\n}\n\nexport default utils;"]},"metadata":{},"sourceType":"module"}