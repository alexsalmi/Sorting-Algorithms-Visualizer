{"ast":null,"code":"var _jsxFileName = \"/home/asalmi/Documents/sort2.0/src/components/DisplayArea.js\";\nimport React, { useState } from 'react';\nimport Measure from 'react-measure';\nimport GraphDisplay from './GraphDisplay';\n\nfunction DisplayArea() {\n  const [dimensions, setDimensions] = useState({\n    width: 300,\n    height: 300\n  });\n  const data = [{\n    x: 0,\n    y: 9\n  }, {\n    x: 1,\n    y: 5\n  }, {\n    x: 2,\n    y: 4\n  }, {\n    x: 3,\n    y: 9\n  }, {\n    x: 4,\n    y: 1\n  }, {\n    x: 5,\n    y: 7\n  }, {\n    x: 6,\n    y: 6\n  }, {\n    x: 7,\n    y: 3\n  }, {\n    x: 8,\n    y: 2\n  }, {\n    x: 9,\n    y: 5\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"103%\",\n      width: \"97%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Measure, {\n    bounds: true,\n    onResize: contentRect => {\n      setDimensions(contentRect.bounds);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, ({\n    measureRef\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    ref: measureRef,\n    style: {\n      height: \"103%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(GraphDisplay, {\n    width: dimensions.width,\n    height: dimensions.height,\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 21\n    }\n  }))));\n}\n\nexport default DisplayArea;","map":{"version":3,"sources":["/home/asalmi/Documents/sort2.0/src/components/DisplayArea.js"],"names":["React","useState","Measure","GraphDisplay","DisplayArea","dimensions","setDimensions","width","height","data","x","y","contentRect","bounds","measureRef"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,SAASC,WAAT,GAAsB;AAClB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC;AAACM,IAAAA,KAAK,EAAE,GAAR;AAAaC,IAAAA,MAAM,EAAE;AAArB,GAAD,CAA5C;AAEA,QAAMC,IAAI,GAAG,CACT;AAACC,IAAAA,CAAC,EAAE,CAAJ;AAAOC,IAAAA,CAAC,EAAE;AAAV,GADS,EAET;AAACD,IAAAA,CAAC,EAAE,CAAJ;AAAOC,IAAAA,CAAC,EAAE;AAAV,GAFS,EAGT;AAACD,IAAAA,CAAC,EAAE,CAAJ;AAAOC,IAAAA,CAAC,EAAE;AAAV,GAHS,EAIT;AAACD,IAAAA,CAAC,EAAE,CAAJ;AAAOC,IAAAA,CAAC,EAAE;AAAV,GAJS,EAKT;AAACD,IAAAA,CAAC,EAAE,CAAJ;AAAOC,IAAAA,CAAC,EAAE;AAAV,GALS,EAMT;AAACD,IAAAA,CAAC,EAAE,CAAJ;AAAOC,IAAAA,CAAC,EAAE;AAAV,GANS,EAOT;AAACD,IAAAA,CAAC,EAAE,CAAJ;AAAOC,IAAAA,CAAC,EAAE;AAAV,GAPS,EAQT;AAACD,IAAAA,CAAC,EAAE,CAAJ;AAAOC,IAAAA,CAAC,EAAE;AAAV,GARS,EAST;AAACD,IAAAA,CAAC,EAAE,CAAJ;AAAOC,IAAAA,CAAC,EAAE;AAAV,GATS,EAUT;AAACD,IAAAA,CAAC,EAAE,CAAJ;AAAOC,IAAAA,CAAC,EAAE;AAAV,GAVS,CAAb;AAaA,sBACI;AAAK,IAAA,KAAK,EAAE;AAACH,MAAAA,MAAM,EAAC,MAAR;AAAgBD,MAAAA,KAAK,EAAC;AAAtB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,OAAD;AACI,IAAA,MAAM,MADV;AAEI,IAAA,QAAQ,EAAEK,WAAW,IAAI;AAACN,MAAAA,aAAa,CAACM,WAAW,CAACC,MAAb,CAAb;AAAkC,KAFhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIK,CAAC;AAAEC,IAAAA;AAAF,GAAD,kBACG;AAAK,IAAA,GAAG,EAAEA,UAAV;AAAsB,IAAA,KAAK,EAAE;AAACN,MAAAA,MAAM,EAAC;AAAR,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AACI,IAAA,KAAK,EAAEH,UAAU,CAACE,KADtB;AAEI,IAAA,MAAM,EAAEF,UAAU,CAACG,MAFvB;AAGI,IAAA,IAAI,EAAEC,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CALR,CADA,CADJ;AAkBH;;AAED,eAAeL,WAAf","sourcesContent":["import React, {useState} from 'react';\nimport Measure from 'react-measure';\n\nimport GraphDisplay from './GraphDisplay';\n\nfunction DisplayArea(){\n    const [dimensions, setDimensions] = useState({width: 300, height: 300});\n\n    const data = [\n        {x: 0, y: 9},\n        {x: 1, y: 5},\n        {x: 2, y: 4},\n        {x: 3, y: 9},\n        {x: 4, y: 1},\n        {x: 5, y: 7},\n        {x: 6, y: 6},\n        {x: 7, y: 3},\n        {x: 8, y: 2},\n        {x: 9, y: 5}\n    ];\n\n    return(\n        <div style={{height:\"103%\", width:\"97%\"}}>\n        <Measure\n            bounds\n            onResize={contentRect => {setDimensions(contentRect.bounds)}}\n        >\n            {({ measureRef }) => (\n                <div ref={measureRef} style={{height:\"103%\"}}>\n                    <GraphDisplay \n                        width={dimensions.width} \n                        height={dimensions.height} \n                        data={data}\n                    />\n                </div>\n            )}\n        </Measure>\n        </div>\n    );\n}\n\nexport default DisplayArea;"]},"metadata":{},"sourceType":"module"}