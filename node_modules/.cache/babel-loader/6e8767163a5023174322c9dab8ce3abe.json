{"ast":null,"code":"import utils from './utils.js';\nimport colors from './colors.js';\nimport Step from './classes.js';\nconst algorithms = {\n  insertion: values => {\n    let size = values.length;\n    let steps = [];\n\n    for (let i = 1; i < size; i++) {\n      let step = steps.push({\n        colors: [{\n          ind: i,\n          color: colors.primary\n        }],\n        changedValues: []\n      });\n\n      for (let j = i; j > 0; j--) {\n        steps.push({\n          colors: [{\n            ind: j,\n            color: colors.primary\n          }, {\n            ind: j - 1,\n            color: colors.selected\n          }],\n          changedValues: []\n        });\n\n        if (values[j - 1] > values[j]) {\n          values = utils.swap(values, j - 1, j);\n          steps.push({\n            colors: [{\n              ind: j,\n              color: colors.selected\n            }, {\n              ind: j - 1,\n              color: colors.primary\n            }],\n            changedValues: [{\n              ind: j,\n              value: values[j]\n            }, {\n              ind: j - 1,\n              value: values[j - 1]\n            }]\n          });\n        } else {\n          break;\n        }\n      }\n    }\n\n    return steps;\n  },\n  selection: values => {\n    let size = values.length;\n    let steps = [];\n\n    for (let i = 0; i < size - 1; i++) {\n      steps.push({\n        colors: [{\n          ind: i,\n          color: colors.primary\n        }],\n        changedValues: []\n      });\n      let minInd = i;\n\n      for (let j = i + 1; j < size; j++) {\n        steps.push({\n          colors: [{\n            ind: minInd,\n            color: colors.secondary\n          }, {\n            ind: i,\n            color: colors.primary\n          }, {\n            ind: j,\n            color: colors.selected\n          }],\n          changedValues: []\n        });\n\n        if (values[j] < values[minInd]) {\n          minInd = j;\n          steps.push({\n            colors: [{\n              ind: i,\n              color: colors.primary\n            }, {\n              ind: minInd,\n              color: colors.secondary\n            }],\n            changedValues: []\n          });\n        }\n      }\n\n      values = utils.swap(values, i, minInd);\n      steps.push({\n        colors: [{\n          ind: i,\n          color: colors.primary\n        }, {\n          ind: minInd,\n          color: colors.secondary\n        }],\n        changedValues: []\n      });\n      steps.push({\n        colors: [{\n          ind: i,\n          color: colors.primary\n        }],\n        changedValues: [{\n          ind: i,\n          value: values[i]\n        }, {\n          ind: minInd,\n          value: values[minInd]\n        }]\n      });\n    }\n\n    return steps;\n  },\n  bubble: values => {\n    let size = values.length;\n    let steps = [];\n    let swapped = false;\n\n    while (!swapped) {}\n  }\n};\nexport default algorithms;","map":{"version":3,"sources":["/home/asalmi/Documents/sort2.0/src/algorithms.js"],"names":["utils","colors","Step","algorithms","insertion","values","size","length","steps","i","step","push","ind","color","primary","changedValues","j","selected","swap","value","selection","minInd","secondary","bubble","swapped"],"mappings":"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","sourcesContent":["import utils from './utils.js'\nimport colors from './colors.js';\nimport Step from './classes.js'\n\nconst algorithms = {\n    insertion: (values) => {\n        let size = values.length;\n        let steps = [];\n\n        for(let i=1; i<size; i++){\n            let step = \n\n            steps.push(\n                {\n                    colors: [{ ind: i, color: colors.primary }],\n                    changedValues: []\n                }\n            );\n            for(let j=i; j>0; j--){\n                steps.push(\n                    {\n                        colors: [\n                            { ind: j, color: colors.primary },\n                            { ind: j-1, color: colors.selected}\n                        ],\n                        changedValues: []\n                    }\n                );\n                if(values[j-1]>values[j]){\n                    values = utils.swap(values, j-1, j);\n                    steps.push(\n                        {\n                            colors: [\n                                { ind: j, color: colors.selected },\n                                { ind: j-1, color: colors.primary }\n                            ],\n                            changedValues: [\n                                { ind: j, value: values[j] },\n                                { ind: j-1, value: values[j-1] }\n                            ]\n                        }\n                    );\n                }\n                else{\n                    break;\n                }\n            }\n        }\n\n        return steps;\n    },\n\n    selection: (values) => {\n        let size = values.length;\n        let steps = [];\n\n        for(let i=0; i<size-1; i++){\n            steps.push(\n                {\n                    colors: [{ ind: i, color: colors.primary }],\n                    changedValues: []\n                }\n            );\n\n            let minInd = i;\n            for(let j=i+1; j<size; j++){\n                steps.push(\n                    {\n                        colors: [\n                            { ind: minInd, color: colors.secondary },\n                            { ind: i, color: colors.primary },\n                            { ind: j, color: colors.selected },\n                        ],\n                        changedValues: []\n                    }\n                );\n                if(values[j] < values[minInd]){\n                    minInd = j;\n                    steps.push(\n                        {\n                            colors: [\n                                { ind: i, color: colors.primary },\n                                { ind: minInd, color: colors.secondary }\n                            ],\n                            changedValues: []\n                        }\n                    );\n                }\n            }\n\n            values = utils.swap(values, i, minInd);\n            steps.push(\n                {\n                    colors: [\n                        { ind: i, color: colors.primary },\n                        { ind: minInd, color: colors.secondary }\n                    ],\n                    changedValues: []\n                }\n            );\n\n            steps.push(\n                {\n                    colors: [\n                        { ind: i, color: colors.primary },\n                    ],\n                    changedValues: [\n                        { ind: i, value: values[i] },\n                        { ind: minInd, value: values[minInd] }\n                    ]\n                }\n            );\n        }\n        return steps;\n    },\n    \n    bubble: (values) => {\n        let size = values.length;\n        let steps = [];\n\n        let swapped = false;\n        while(!swapped){\n        }\n\n    },\n};\n\nexport default algorithms;"]},"metadata":{},"sourceType":"module"}