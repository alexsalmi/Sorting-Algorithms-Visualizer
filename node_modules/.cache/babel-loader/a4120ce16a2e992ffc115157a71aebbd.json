{"ast":null,"code":"import utils from './utils.js';\nconst algorithms = {\n  insertion: values => {\n    let size = values.length;\n    console.log(values[0], values[1], values[2], values[3], values[4]);\n\n    for (let i = 1; i < size; i++) {\n      let val = values[i];\n\n      for (let j = i - 1; j >= 0; j--) {\n        if (values[j] > val) {\n          values = utils.swap(values, i, j);\n        } else {\n          break;\n        }\n      }\n    }\n\n    console.log(values[0], values[1], values[2], values[3], values[4]);\n    return values;\n  },\n  selection: values => {},\n  merge: values => {}\n};\nexport default algorithms;","map":{"version":3,"sources":["/home/asalmi/Documents/sort2.0/src/algorithms.js"],"names":["utils","algorithms","insertion","values","size","length","console","log","i","val","j","swap","selection","merge"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AAEA,MAAMC,UAAU,GAAG;AACfC,EAAAA,SAAS,EAAGC,MAAD,IAAY;AACnB,QAAIC,IAAI,GAAGD,MAAM,CAACE,MAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAAC,CAAD,CAAlB,EAAuBA,MAAM,CAAC,CAAD,CAA7B,EAAkCA,MAAM,CAAC,CAAD,CAAxC,EAA6CA,MAAM,CAAC,CAAD,CAAnD,EAAwDA,MAAM,CAAC,CAAD,CAA9D;;AAEA,SAAI,IAAIK,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACJ,IAAf,EAAqBI,CAAC,EAAtB,EAAyB;AACrB,UAAIC,GAAG,GAAGN,MAAM,CAACK,CAAD,CAAhB;;AACA,WAAI,IAAIE,CAAC,GAACF,CAAC,GAAC,CAAZ,EAAeE,CAAC,IAAE,CAAlB,EAAqBA,CAAC,EAAtB,EAAyB;AACrB,YAAGP,MAAM,CAACO,CAAD,CAAN,GAAUD,GAAb,EAAiB;AACbN,UAAAA,MAAM,GAAGH,KAAK,CAACW,IAAN,CAAWR,MAAX,EAAmBK,CAAnB,EAAsBE,CAAtB,CAAT;AACH,SAFD,MAGI;AACA;AACH;AACJ;AACJ;;AACDJ,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAAC,CAAD,CAAlB,EAAuBA,MAAM,CAAC,CAAD,CAA7B,EAAkCA,MAAM,CAAC,CAAD,CAAxC,EAA6CA,MAAM,CAAC,CAAD,CAAnD,EAAwDA,MAAM,CAAC,CAAD,CAA9D;AAEA,WAAOA,MAAP;AACH,GAnBc;AAqBfS,EAAAA,SAAS,EAAGT,MAAD,IAAY,CAEtB,CAvBc;AAyBfU,EAAAA,KAAK,EAAGV,MAAD,IAAY,CAElB;AA3Bc,CAAnB;AA8BA,eAAeF,UAAf","sourcesContent":["import utils from './utils.js'\n\nconst algorithms = {\n    insertion: (values) => {\n        let size = values.length;\n        console.log(values[0], values[1], values[2], values[3], values[4]);\n\n        for(let i=1; i<size; i++){\n            let val = values[i];\n            for(let j=i-1; j>=0; j--){\n                if(values[j]>val){\n                    values = utils.swap(values, i, j);\n                }\n                else{\n                    break;\n                }\n            }\n        }\n        console.log(values[0], values[1], values[2], values[3], values[4]);\n\n        return values;\n    },\n\n    selection: (values) => {\n\n    },\n    \n    merge: (values) => {\n\n    },\n};\n\nexport default algorithms;"]},"metadata":{},"sourceType":"module"}