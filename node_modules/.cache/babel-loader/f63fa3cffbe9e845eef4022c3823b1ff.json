{"ast":null,"code":"import utils from './utils.js';\nimport colors from './colors.js';\nimport SolveStep from './classes.js';\nconst algorithms = {\n  insertion: values => {\n    let size = values.length;\n    let steps = [];\n\n    for (let i = 1; i < size; i++) {\n      var step = new SolveStep('sort');\n      step.setSorted(i - 1, true);\n      steps.push(step);\n      var step = new SolveStep('color');\n      step.addColor(i, colors.primary);\n      steps.push(step);\n\n      for (let j = i; j > 0; j--) {\n        var step = new SolveStep('color');\n        step.addColor(j, colors.primary);\n        step.addColor(j - 1, colors.selected);\n        steps.push(step);\n\n        if (values[j - 1] > values[j]) {\n          values = utils.swap(values, j - 1, j);\n          var step = new SolveStep('swap');\n          step.addSwap(j, values[j - 1], j - 1, values[j]);\n        } else {\n          break;\n        }\n      }\n    }\n\n    return steps;\n  },\n  selection: values => {\n    let size = values.length;\n    let steps = [];\n\n    for (let i = 0; i < size - 1; i++) {\n      steps.push({\n        colors: [{\n          ind: i,\n          color: colors.primary\n        }],\n        changedValues: []\n      });\n      let minInd = i;\n\n      for (let j = i + 1; j < size; j++) {\n        steps.push({\n          colors: [{\n            ind: minInd,\n            color: colors.secondary\n          }, {\n            ind: i,\n            color: colors.primary\n          }, {\n            ind: j,\n            color: colors.selected\n          }],\n          changedValues: []\n        });\n\n        if (values[j] < values[minInd]) {\n          minInd = j;\n          steps.push({\n            colors: [{\n              ind: i,\n              color: colors.primary\n            }, {\n              ind: minInd,\n              color: colors.secondary\n            }],\n            changedValues: []\n          });\n        }\n      }\n\n      values = utils.swap(values, i, minInd);\n      steps.push({\n        colors: [{\n          ind: i,\n          color: colors.primary\n        }, {\n          ind: minInd,\n          color: colors.secondary\n        }],\n        changedValues: []\n      });\n      steps.push({\n        colors: [{\n          ind: i,\n          color: colors.primary\n        }],\n        changedValues: [{\n          ind: i,\n          value: values[i]\n        }, {\n          ind: minInd,\n          value: values[minInd]\n        }]\n      });\n    }\n\n    return steps;\n  },\n  bubble: values => {\n    let size = values.length;\n    let steps = [];\n    let swapped = false;\n\n    while (!swapped) {}\n  }\n};\nexport default algorithms; // import utils from './utils.js'\n// import colors from './colors.js';\n// const algorithms = {\n//     insertion: (values) => {\n//         let size = values.length;\n//         let steps = [];\n//         for(let i=1; i<size; i++){\n//             let step = \n//             steps.push(\n//                 {\n//                     colors: [{ ind: i, color: colors.primary }],\n//                     changedValues: []\n//                 }\n//             );\n//             for(let j=i; j>0; j--){\n//                 steps.push(\n//                     {\n//                         colors: [\n//                             { ind: j, color: colors.primary },\n//                             { ind: j-1, color: colors.selected}\n//                         ],\n//                         changedValues: []\n//                     }\n//                 );\n//                 if(values[j-1]>values[j]){\n//                     values = utils.swap(values, j-1, j);\n//                     steps.push(\n//                         {\n//                             colors: [\n//                                 { ind: j, color: colors.selected },\n//                                 { ind: j-1, color: colors.primary }\n//                             ],\n//                             changedValues: [\n//                                 { ind: j, value: values[j] },\n//                                 { ind: j-1, value: values[j-1] }\n//                             ]\n//                         }\n//                     );\n//                 }\n//                 else{\n//                     break;\n//                 }\n//             }\n//         }\n//         return steps;\n//     },\n//     selection: (values) => {\n//         let size = values.length;\n//         let steps = [];\n//         for(let i=0; i<size-1; i++){\n//             steps.push(\n//                 {\n//                     colors: [{ ind: i, color: colors.primary }],\n//                     changedValues: []\n//                 }\n//             );\n//             let minInd = i;\n//             for(let j=i+1; j<size; j++){\n//                 steps.push(\n//                     {\n//                         colors: [\n//                             { ind: minInd, color: colors.secondary },\n//                             { ind: i, color: colors.primary },\n//                             { ind: j, color: colors.selected },\n//                         ],\n//                         changedValues: []\n//                     }\n//                 );\n//                 if(values[j] < values[minInd]){\n//                     minInd = j;\n//                     steps.push(\n//                         {\n//                             colors: [\n//                                 { ind: i, color: colors.primary },\n//                                 { ind: minInd, color: colors.secondary }\n//                             ],\n//                             changedValues: []\n//                         }\n//                     );\n//                 }\n//             }\n//             values = utils.swap(values, i, minInd);\n//             steps.push(\n//                 {\n//                     colors: [\n//                         { ind: i, color: colors.primary },\n//                         { ind: minInd, color: colors.secondary }\n//                     ],\n//                     changedValues: []\n//                 }\n//             );\n//             steps.push(\n//                 {\n//                     colors: [\n//                         { ind: i, color: colors.primary },\n//                     ],\n//                     changedValues: [\n//                         { ind: i, value: values[i] },\n//                         { ind: minInd, value: values[minInd] }\n//                     ]\n//                 }\n//             );\n//         }\n//         return steps;\n//     },\n//     bubble: (values) => {\n//         let size = values.length;\n//         let steps = [];\n//         let swapped = false;\n//         while(!swapped){\n//         }\n//     },\n// };\n// export default algorithms;","map":{"version":3,"sources":["/home/asalmi/Documents/sort2.0/src/algorithms.js"],"names":["utils","colors","SolveStep","algorithms","insertion","values","size","length","steps","i","step","setSorted","push","addColor","primary","j","selected","swap","addSwap","selection","ind","color","changedValues","minInd","secondary","value","bubble","swapped"],"mappings":"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":["import utils from './utils.js'\nimport colors from './colors.js';\n\nimport SolveStep from './classes.js';\n\nconst algorithms = {\n    insertion: (values) => {\n        let size = values.length;\n        let steps = [];\n\n        for(let i=1; i<size; i++){\n            var step = new SolveStep('sort');\n            step.setSorted(i-1, true);\n            steps.push(step);\n\n            var step = new SolveStep('color');\n            step.addColor(i, colors.primary);\n            steps.push(step);\n\n            for(let j=i; j>0; j--){\n                var step = new SolveStep('color');\n                step.addColor(j, colors.primary);\n                step.addColor(j-1, colors.selected);\n                steps.push(step);\n\n                if(values[j-1]>values[j]){\n                    values = utils.swap(values, j-1, j);\n\n                    var step = new SolveStep('swap');\n                    step.addSwap(j, values[j-1], j-1, values[j]);\n                }\n                else{\n                    break;\n                }\n            }\n        }\n\n        return steps;\n    },\n\n    selection: (values) => {\n        let size = values.length;\n        let steps = [];\n\n        for(let i=0; i<size-1; i++){\n            steps.push(\n                {\n                    colors: [{ ind: i, color: colors.primary }],\n                    changedValues: []\n                }\n            );\n\n            let minInd = i;\n            for(let j=i+1; j<size; j++){\n                steps.push(\n                    {\n                        colors: [\n                            { ind: minInd, color: colors.secondary },\n                            { ind: i, color: colors.primary },\n                            { ind: j, color: colors.selected },\n                        ],\n                        changedValues: []\n                    }\n                );\n                if(values[j] < values[minInd]){\n                    minInd = j;\n                    steps.push(\n                        {\n                            colors: [\n                                { ind: i, color: colors.primary },\n                                { ind: minInd, color: colors.secondary }\n                            ],\n                            changedValues: []\n                        }\n                    );\n                }\n            }\n\n            values = utils.swap(values, i, minInd);\n            steps.push(\n                {\n                    colors: [\n                        { ind: i, color: colors.primary },\n                        { ind: minInd, color: colors.secondary }\n                    ],\n                    changedValues: []\n                }\n            );\n\n            steps.push(\n                {\n                    colors: [\n                        { ind: i, color: colors.primary },\n                    ],\n                    changedValues: [\n                        { ind: i, value: values[i] },\n                        { ind: minInd, value: values[minInd] }\n                    ]\n                }\n            );\n        }\n        return steps;\n    },\n    \n    bubble: (values) => {\n        let size = values.length;\n        let steps = [];\n\n        let swapped = false;\n        while(!swapped){\n        }\n\n    },\n};\n\nexport default algorithms;\n\n// import utils from './utils.js'\n// import colors from './colors.js';\n\n// const algorithms = {\n//     insertion: (values) => {\n//         let size = values.length;\n//         let steps = [];\n\n//         for(let i=1; i<size; i++){\n//             let step = \n\n//             steps.push(\n//                 {\n//                     colors: [{ ind: i, color: colors.primary }],\n//                     changedValues: []\n//                 }\n//             );\n//             for(let j=i; j>0; j--){\n//                 steps.push(\n//                     {\n//                         colors: [\n//                             { ind: j, color: colors.primary },\n//                             { ind: j-1, color: colors.selected}\n//                         ],\n//                         changedValues: []\n//                     }\n//                 );\n//                 if(values[j-1]>values[j]){\n//                     values = utils.swap(values, j-1, j);\n//                     steps.push(\n//                         {\n//                             colors: [\n//                                 { ind: j, color: colors.selected },\n//                                 { ind: j-1, color: colors.primary }\n//                             ],\n//                             changedValues: [\n//                                 { ind: j, value: values[j] },\n//                                 { ind: j-1, value: values[j-1] }\n//                             ]\n//                         }\n//                     );\n//                 }\n//                 else{\n//                     break;\n//                 }\n//             }\n//         }\n\n//         return steps;\n//     },\n\n//     selection: (values) => {\n//         let size = values.length;\n//         let steps = [];\n\n//         for(let i=0; i<size-1; i++){\n//             steps.push(\n//                 {\n//                     colors: [{ ind: i, color: colors.primary }],\n//                     changedValues: []\n//                 }\n//             );\n\n//             let minInd = i;\n//             for(let j=i+1; j<size; j++){\n//                 steps.push(\n//                     {\n//                         colors: [\n//                             { ind: minInd, color: colors.secondary },\n//                             { ind: i, color: colors.primary },\n//                             { ind: j, color: colors.selected },\n//                         ],\n//                         changedValues: []\n//                     }\n//                 );\n//                 if(values[j] < values[minInd]){\n//                     minInd = j;\n//                     steps.push(\n//                         {\n//                             colors: [\n//                                 { ind: i, color: colors.primary },\n//                                 { ind: minInd, color: colors.secondary }\n//                             ],\n//                             changedValues: []\n//                         }\n//                     );\n//                 }\n//             }\n\n//             values = utils.swap(values, i, minInd);\n//             steps.push(\n//                 {\n//                     colors: [\n//                         { ind: i, color: colors.primary },\n//                         { ind: minInd, color: colors.secondary }\n//                     ],\n//                     changedValues: []\n//                 }\n//             );\n\n//             steps.push(\n//                 {\n//                     colors: [\n//                         { ind: i, color: colors.primary },\n//                     ],\n//                     changedValues: [\n//                         { ind: i, value: values[i] },\n//                         { ind: minInd, value: values[minInd] }\n//                     ]\n//                 }\n//             );\n//         }\n//         return steps;\n//     },\n    \n//     bubble: (values) => {\n//         let size = values.length;\n//         let steps = [];\n\n//         let swapped = false;\n//         while(!swapped){\n//         }\n\n//     },\n// };\n\n// export default algorithms;"]},"metadata":{},"sourceType":"module"}